# Task ID: 13
# Title: Implement GoAPI Integration Service
# Status: done
# Dependencies: 2
# Priority: medium
# Description: Create a service to interact with the GoAPI for generating AI background music.
# Details:
1. Create GoAPIService class:
   ```python
   class GoAPIService:
       def __init__(self, api_key):
           self.api_key = api_key
           self.base_url = 'https://api.goapi.io/v1'
           
       def generate_music(self, prompt, duration=180, webhook_url=None):
           # Request music generation
           payload = {
               'prompt': prompt,
               'duration': duration,
               'model': 'suno-v3'
           }
           
           if webhook_url:
               payload['webhook_url'] = webhook_url
               
           response = requests.post(
               f"{self.base_url}/music/generate",
               json=payload,
               headers={'Authorization': f"Bearer {self.api_key}"}
           )
           response.raise_for_status()
           return response.json()
           
       def get_music_status(self, job_id):
           # Check status of music generation
           response = requests.get(
               f"{self.base_url}/music/status/{job_id}",
               headers={'Authorization': f"Bearer {self.api_key}"}
           )
           response.raise_for_status()
           return response.json()
   ```
2. Implement retry logic for API failures
3. Add support for different music generation parameters
4. Implement webhook URL generation for async callbacks
5. Add detailed error handling and logging

# Test Strategy:
Test with sample prompts to verify music generation. Mock GoAPI responses for unit tests. Test both synchronous and asynchronous generation modes. Verify error handling and retry logic. Test with various prompts and duration parameters.
