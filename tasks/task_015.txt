# Task ID: 15
# Title: Implement GoAPI Webhook Handler
# Status: pending
# Dependencies: 3, 13, 14
# Priority: medium
# Description: Create the webhook endpoint to handle callbacks from GoAPI when music generation is complete.
# Details:
1. Create Flask route for GoAPI webhooks:
   ```python
   @app.route('/webhooks/goapi', methods=['POST'])
   def goapi_webhook():
       # Log raw webhook payload
       payload = request.json
       video_id = request.args.get('video_id')
       
       # Create webhook event record
       event = WebhookEventModel().create({
           'Event ID': str(uuid.uuid4()),
           'Service': 'GoAPI',
           'Endpoint': '/webhooks/goapi',
           'Raw Payload': json.dumps(payload),
           'Processed': False,
           'Success': None,
           'Timestamp': datetime.now().isoformat()
       })
       
       try:
           # Find related job
           jobs = JobModel().find({
               'Related Video': [video_id],
               'Type': 'music_generation',
               'Status': 'processing'
           })
           
           if not jobs:
               raise Exception(f"No matching job found for video {video_id}")
               
           job = jobs[0]
           
           # Process webhook payload
           if payload.get('status') == 'completed':
               # Get music URL from payload
               music_url = payload.get('output', {}).get('url')
               
               if not music_url:
                   raise Exception("No music URL in webhook payload")
                   
               # Update video with music URL
               video = VideoModel().get(video_id)
               combined_video_url = video['fields'].get('Combined Segments Video')
               
               # Update video with music URL
               VideoModel().update(video_id, {
                   'Music': music_url,
                   'Status': 'adding_music'
               })
               
               # Generate webhook URL for callback
               webhook_url = f"{config.BASE_URL}/webhooks/nca-toolkit?video_id={video_id}&operation=add_music"
               
               # Request adding music to video
               nca = NCAToolkitService(config.NCA_API_KEY)
               add_music_result = nca.add_background_music(
                   combined_video_url,
                   music_url,
                   f"video_{video_id}_final.mp4",
                   volume_ratio=0.2,
                   webhook_url=webhook_url
               )
               
               # Create job record for adding music
               music_job = JobModel().create({
                   'Job ID': str(uuid.uuid4()),
                   'Type': 'music_addition',
                   'Status': 'processing',
                   'Related Video': [video_id],
                   'External Job ID': add_music_result.get('job_id'),
                   'Webhook URL': webhook_url,
                   'Timestamps': json.dumps({'created': datetime.now().isoformat()})
               })
               
               # Update music generation job status
               JobModel().update(job['id'], {
                   'Status': 'completed',
                   'Timestamps': json.dumps({
                       **json.loads(job['fields'].get('Timestamps', '{}')),
                       'completed': datetime.now().isoformat()
                   })
               })
               
               # Update webhook event
               WebhookEventModel().update(event['id'], {
                   'Processed': True,
                   'Success': True,
                   'Related Job': [job['id']]
               })
               
               return jsonify({'status': 'success'})
           else:
               # Handle error or other statuses
               error_message = payload.get('error', {}).get('message', 'Unknown error')
               
               # Update job with error
               JobModel().update(job['id'], {
                   'Status': 'failed',
                   'Error Details': error_message,
                   'Timestamps': json.dumps({
                       **json.loads(job['fields'].get('Timestamps', '{}')),
                       'failed': datetime.now().isoformat()
                   })
               })
               
               # Update video status
               VideoModel().update(video_id, {
                   'Status': 'music_generation_failed',
                   'Error Details': error_message
               })
               
               # Update webhook event
               WebhookEventModel().update(event['id'], {
                   'Processed': True,
                   'Success': False,
                   'Related Job': [job['id']]
               })
               
               return jsonify({'status': 'error', 'message': error_message})
               
       except Exception as e:
           # Log error and update webhook event
           logger.error(f"Error processing GoAPI webhook: {str(e)}")
           WebhookEventModel().update(event['id'], {
               'Processed': True,
               'Success': False,
               'Error Details': str(e)
           })
           return jsonify({'status': 'error', 'message': str(e)}), 500
   ```
2. Implement webhook signature validation
3. Add comprehensive error handling
4. Implement retry logic for transient failures
5. Add detailed logging for debugging

# Test Strategy:
Test with sample webhook payloads for successful and failed music generation. Verify correct handling of various webhook formats. Test error scenarios and recovery. Verify all data is correctly updated in Airtable. Test webhook signature validation.
