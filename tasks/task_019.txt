# Task ID: 19
# Title: Implement Input Validation Middleware
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Create middleware for validating and sanitizing API input data to prevent security issues and ensure data quality.
# Details:
1. Create input validation using Marshmallow or Pydantic:
   ```python
   from marshmallow import Schema, fields, validate, ValidationError
   
   class ProcessScriptSchema(Schema):
       script = fields.String(required=True, validate=validate.Length(min=1))
       segment_duration = fields.Integer(missing=30, validate=validate.Range(min=10, max=300))
       name = fields.String(missing='Untitled Video')
   
   @app.route('/api/v1/process-script', methods=['POST'])
   def process_script():
       try:
           # Validate input data
           schema = ProcessScriptSchema()
           data = schema.load(request.json)
           
           # Proceed with validated data
           # ...
       except ValidationError as err:
           return jsonify({'error': 'Validation error', 'details': err.messages}), 400
   ```
2. Create validation schemas for all API endpoints
3. Implement content sanitization for text inputs
4. Add custom validators for specific data formats
5. Implement consistent error responses for validation failures

# Test Strategy:
Test validation with valid and invalid input data. Verify correct HTTP status codes and error messages are returned. Test with malicious input data to verify sanitization. Test all validation rules for each endpoint.
